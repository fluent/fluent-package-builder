name: Yum based Linux
on:
  push:
    branches:
      - master
      - fluent-package-v5
  pull_request:
concurrency:
  group: ${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  build:
    name: Build
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        label:
          - RockyLinux 8 x86_64
          - AlmaLinux 9 x86_64
          - Amazon Linux 2 x86_64
          - Amazon Linux 2023 x86_64
        include:
          - label: RockyLinux 8 x86_64
            rake-job: rockylinux-8
            test-docker-image: rockylinux/rockylinux:8
            centos-stream: false
          - label: AlmaLinux 9 x86_64
            rake-job: almalinux-9
            test-docker-image: almalinux:9
            centos-stream: false
          - label: Amazon Linux 2 x86_64
            rake-job: amazonlinux-2
            test-docker-image: amazonlinux:2
            centos-stream: false
          - label: Amazon Linux 2023 x86_64
            rake-job: amazonlinux-2023
            test-docker-image: amazonlinux:2023
            centos-stream: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt -V install ruby ruby-bundler ruby-serverspec
          sudo gem install bundler:2.2.9 --no-document
          sudo gem uninstall fileutils
      - name: Build rpm with Docker
        run: |
          rake yum:build YUM_TARGETS=${{ matrix.rake-job }}
      - name: Upload fluent-package rpm
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.rake-job }}
          path: fluent-package/yum/repositories
      # TODO move the following steps to "Test" job
      - name: Check Package Size
        run: |
          fluent-package/yum/pkgsize-test.sh ${{ matrix.rake-job }} x86_64
      - name: Installation Test
        run: |
          mkdir -p .bundle
          docker run \
          --rm \
          --tty \
          --volume ${PWD}:/fluentd:ro \
          --env CENTOS_STREAM=${{ matrix.centos-stream }} \
          ${{ matrix.test-docker-image }} \
          /fluentd/fluent-package/yum/install-test.sh
      - name: Serverspec Test
        run: |
          mkdir -p .bundle
          docker run \
          --rm \
          --tty \
          --volume ${PWD}:/fluentd:ro \
          --env CENTOS_STREAM=${{ matrix.centos-stream }} \
          ${{ matrix.test-docker-image }} \
          /fluentd/fluent-package/yum/serverspec-test.sh
      - name: Binstubs Test
        run: |
          mkdir -p .bundle
          docker run \
          --rm \
          --tty \
          --volume ${PWD}:/fluentd:ro \
          --env CENTOS_STREAM=${{ matrix.centos-stream }} \
          ${{ matrix.test-docker-image }} \
          /fluentd/fluent-package/yum/binstubs-test.sh
  v1test:
    name: Test ${{ matrix.label }} ${{ matrix.test-file }} (CGroup V1)
    needs: build
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        label:
          - AmazonLinux 2 x86_64
          - AmazonLinux 2023 x86_64
        test-file:
          - "update-from-v4.sh"
          - "update-to-next-version-with-backward-compat-for-v4.sh"
          - "downgrade-to-v4.sh"
          - "install-newly.sh local"
          - "install-newly.sh v5"
          - "install-newly.sh lts"
        include:
          - label: AmazonLinux 2 x86_64
            rake-job: amazonlinux-2
            container-image: images:amazonlinux/2
          - label: AmazonLinux 2023 x86_64
            rake-job: amazonlinux-2023
            container-image: images:amazonlinux/2023
        exclude:
          - label: AmazonLinux 2023 x86_64
            test-file: update-from-v4.sh
          - label: AmazonLinux 2023 x86_64
            test-file: update-to-next-version-with-backward-compat-for-v4.sh
          - label: AmazonLinux 2023 x86_64
            test-file: downgrade-to-v4.sh
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages-${{ matrix.rake-job }}
      - name: Install Incus
        run: |
          sudo curl -fsSL https://pkgs.zabbly.com/key.asc -o /etc/apt/keyrings/zabbly.asc
          cat <<SOURCES | sudo tee /etc/apt/sources.list.d/zabbly-incus-stable.sources
          Enabled: yes
          Types: deb
          URIs: https://pkgs.zabbly.com/incus/stable
          Suites: $(. /etc/os-release && echo ${VERSION_CODENAME})
          Components: main
          Architectures: $(dpkg --print-architecture)
          Signed-By: /etc/apt/keyrings/zabbly.asc
          SOURCES

          sudo apt-get update
          sudo apt-get install -y -V incus
      - name: Allow egress network traffic flows for Incus
        # https://linuxcontainers.org/incus/docs/main/howto/network_bridge_firewalld/#prevent-connectivity-issues-with-incus-and-docker
        run: |
          sudo iptables -I DOCKER-USER -i incusbr0 -j ACCEPT
          sudo iptables -I DOCKER-USER -o incusbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      - name: Setup Incus
        run: |
          sudo incus admin init --auto
      - name: Run Test ${{ matrix.test-file }} on ${{ matrix.container-image }}
        run: fluent-package/yum/systemd-test/test.sh ${{ matrix.container-image }} ${{ matrix.test-file }}

  v2test:
    name: Test ${{ matrix.label }} ${{ matrix.test-file }} (CGroup V2)
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        label:
          - RockyLinux 8 x86_64
          - AlmaLinux 9 x86_64
        test-file:
          - "update-from-v4.sh"
          - "update-to-next-version-with-backward-compat-for-v4.sh"
          - "downgrade-to-v4.sh"
          - "install-newly.sh local"
          - "install-newly.sh v5"
          - "install-newly.sh lts"
        include:
          - label: RockyLinux 8 x86_64
            rake-job: rockylinux-8
            container-image: images:rockylinux/8
          - label: AlmaLinux 9 x86_64
            rake-job: almalinux-9
            container-image: images:almalinux/9
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages-${{ matrix.rake-job }}
      - name: Install Incus
        run: |
          sudo apt-get update
          sudo apt-get install -y -V incus
      - name: Allow egress network traffic flows for Incus
        # https://linuxcontainers.org/incus/docs/main/howto/network_bridge_firewalld/#prevent-connectivity-issues-with-incus-and-docker
        run: |
          sudo iptables -I DOCKER-USER -i incusbr0 -j ACCEPT
          sudo iptables -I DOCKER-USER -o incusbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      - name: Setup Incus
        run: |
          sudo incus admin init --auto
      - name: Run Test ${{ matrix.test-file }} on ${{ matrix.container-image }}
        run: fluent-package/yum/systemd-test/test.sh ${{ matrix.container-image }} ${{ matrix.test-file }}
